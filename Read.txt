npm i -g nodemon #(Global installation of nodemon)
npm i express body-parser bcrypt cors dotenv gridfs-stream multer multer-gridfs-storage helmet morgan jsonwebtoken mongoose
(#body-parser , Express body-parser is an npm module used to process data sent in an HTTP request body)
(# Bcrypt is a password hashing algorithm designed for safe password storing that helps to significantly reduce the risk of dictionary-based)
(# CORS: It is a package that helps us enable cross-origin requests with various options. )
(# Cross-origin requests , requests from domain , sub-domain or different port )
(# GridFS is a specification that describes how to split files into chunks during storage and reassemble them during retrieval , Files that are larger than 16MB)
(# Multer simplifies the process of accepting files as part of an HTTP POST request, processing them, and saving them to a location on your server or cloud storage)
(# Multer-gridfs-storage is a Node.js middleware for storing files uploaded through Express in MongoDB using GridFS. GridFS is a specification for storing and retrieving files larger than the BSON-document size limit of 16MB. Multer is a Node.js middleware for handling multipart/form-data, which is used for uploading files.)
(# Helmet.js is a collection of 12 Node modules that interface with Express)
(# Helmet.js is a collection of 12 Node modules that interface with Express. Each module provides configuration options for securing different HTTP headers{request , response , etc.})
(# Morgan can access all the information from an HTTP request and response)
(# JSON Web Token (JWT) is an open standard that provides a compressed and independent method for secure data transfer among parties as a JSON object.)
(# Mongoose is a JavaScript Object Document Modeling (ODM) library for MongoDB. It provides a schema-based solution to model application data, including built-in features like type casting, validation, query building, and business logic hooks , Mongoose is designed to work in an asynchronous environment.)

Controllers have Authentication and handles it 
Models have data format 
Middleware handles authorization
Routes handles all the subdomains i.e. /auth/login , /auth/register , etc.


npm i react-redux @reduxjs/toolkit redux-persist react-dropzone dotenv formik yup react-router-dom@6 @mui/material @emotion/react @emotion/styled @mui/icons-material
(# Redux gives you a single place (the store) to store and manage your app's data. This means no more passing data through props between different components, making your code cleaner and more organized. )
(# redux-persist allows you to store user and token information locally so that frontend is always somewhat loaded )
(# react-dropzone handles file uploads as well as its handling to send it to backend)
(# formik for form handling)
(# yup for validation)


Authentication verifies a user's identity, while authorization determines what a user can access.

Difference between mongoose and mongodb ? Mongoose stored the data that is in a consistent format and doesn't change while mongodb stores data that needs flexibility i.e. data or its type changes frequently

